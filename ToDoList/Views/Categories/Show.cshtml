@using ToDoList.Models;
<link rel="stylesheet" type="text/css" href="~/css/styles.css" />

<h3>Here are all the items in this category:</h3>

<ol>
  @foreach (var item in @Model["items"])  // We loop through all Items in the model. We passed the view a Dictionary containing key-value pairs, so we access Items with @Model["items"] square bracket notation.
  {
    <li><a href='/categories/@Model["category"].Id/items/@item.Id'>@item.Description</a></li> // For each Item, we display its description in an <li> 
      
      // We've also made each <li> a link to the path '/categories/@Model["category"].Id/items/@item.Id'. This will be the item's detail view. We already have an Item detail page associated with the Show() route on the ItemsController, but it's not at this super long path!

      // When the user clicks an Item from this list, they'll navigate to the Item's detail (show) page. Notice the path in this link is /categories/@Model["category"].Id/items/@item.Id, which follows RESTful standards depicted in the tables above.
  }
</ol>

<p><a href='/categories/@Model["category"].Id/items/new'>Add a new item</a></p>
<p><a href='/categories'>Return to category list</a></p>
<p><a href='/'>Return to main page</a></p>